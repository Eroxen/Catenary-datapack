from beet import Language, FunctionTag
from nbtlib import Float

class Translations:
  def error(key, text):
    return {"translate":"key","fallback":text,"color":"red"}
  
def add_translation(key: str, value: str):
    lang = ctx.assets.languages.get("catenary:en_us", {data:{}}).data
    lang[key] = value
    ctx.assets.languages["catenary:en_us"] = Language(lang)
    return key

def register_scoreboard_objective(name):
    append function catenary:uninstall/remove_scoreboard_objectives:
        say name
    return name

def add_loot_table(item):
    path = f'{item.namespace}:{item.category}/{item.id}'
    loot_table path {
        "pools": [{"rolls": 1,"entries": [{
            "type": "minecraft:item",
            "name": f'minecraft:{item.base_item}',
            "functions": [{"function": "minecraft:set_components","components": item.components}]
        }]}]
    }
    item.loot_table = path
    return item

def add_to_function_tag(tag_location):
    func = ~/
    ctx.data.function_tags.setdefault(tag_location).merge(FunctionTag({
        "values": [
            func
        ]
    }))

def camel_case_to_snake_case(s: str):
    out = s[0].lower()
    for c in s[1:]:
        if c.isupper():
            out += '_' + c.lower()
        elif c.islower() or c.isnumeric():
            out += c
        else:
            out += '_'
    while '__' in out:
        out = out.replace('__','_')
    return out

def snake_case_to_words(s: str):
    words = []
    for word in s.split("_"):
        words.append(word.capitalize())
    return " ".join(words)

class Direction:
    opposite = {
        "up": "down",
        "down": "up",
        "west": "east",
        "east": "west",
        "north": "south",
        "south": "north"
    }
    all = ["up", "down", "south", "north", "east", "west"] # ordering from item frame facing
    horizontal = ["south", "north", "east", "west"]
    horizontal_rotation = {
        "south": 0,
        "north": 180,
        "east": 270,
        "west": 90
    }
    rotation = {
        "up": [0, 90],
        "down": [0, -90],
        "south": [0, 0],
        "north": [180, 0],
        "east": [270, 0],
        "west": [90, 0]
    }
    class iterators:
        def float_array(array, nbt=False):
            if nbt:
                a = []
                for f in array:
                    a.append(Float(f))
                return a
            return array
        
        @classmethod
        def jigsaw_orientations(cls, nbt=True):
            ocls = Direction
            for hor in ocls.horizontal:
                yield (f"up_{hor}", cls.float_array([ocls.horizontal_rotation[ocls.opposite[hor]], -90], nbt))
                yield (f"{hor}_up", cls.float_array([ocls.horizontal_rotation[hor], 0], nbt))
                yield (f"down_{hor}", cls.float_array([ocls.horizontal_rotation[hor], 90], nbt))


char_width = {' ': 3, '!': 1, '"': 1, '#': 5, '$': 5, '%': 5, '&': 5, "'": 1, '(': 3, ')': 3, '*': 3, '+': 5, ',': 1, '-': 5, '.': 1, '/': 5, '0': 5, '1': 5, '2': 5, '3': 5, '4': 5, '5': 5, '6': 5, '7': 5, '8': 5, '9': 5, ':': 1, ';': 1, '<': 4, '=': 5, '>': 4, '?': 5, '@': 6, 'A': 5, 'B': 5, 'C': 5, 'D': 5, 'E': 5, 'F': 5, 'G': 5, 'H': 5, 'I': 3, 'J': 5, 'K': 5, 'L': 5, 'M': 5, 'N': 5, 'O': 5, 'P': 5, 'Q': 5, 'R': 5, 'S': 5, 'T': 5, 'U': 5, 'V': 5, 'W': 5, 'X': 5, 'Y': 5, 'Z': 5, '[': 3, '\\': 5, ']': 3, '^': 5, '_': 5, '`': 2, 'a': 5, 'b': 5, 'c': 5, 'd': 5, 'e': 5, 'f': 4, 'g': 5, 'h': 5, 'i': 1, 'j': 5, 'k': 4, 'l': 2, 'm': 5, 'n': 5, 'o': 5, 'p': 5, 'q': 5, 'r': 5, 's': 5, 't': 3, 'u': 5, 'v': 5, 'w': 5, 'x': 5, 'y': 5, 'z': 5, '{': 3, '|': 1, '}': 3, '~': 6, '£': 5, 'ƒ': 5, 'ª': 4, 'º': 4, '¬': 5, '«': 6, '»': 6, '░': 1, '▒': 8, '▓': 8, '│': 2, '┤': 5, '╡': 5, '╢': 4, '╖': 7, '╕': 5, '╣': 4, '║': 2, '╗': 7, '╝': 7, '╜': 7, '╛': 5, '┐': 5, '└': 5, '┴': 8, '┬': 8, '├': 5, '─': 8, '┼': 8, '╞': 5, '╟': 2, '╚': 6, '╔': 6, '╩': 8, '╦': 8, '╠': 2, '═': 8, '╬': 4, '╧': 8, '╨': 8, '╤': 8, '╥': 8, '╙': 6, '╘': 5, '╒': 5, '╓': 6, '╫': 8, '╪': 8, '┘': 5, '┌': 5, '█': 8, '▄': 8, '▌': 4, '▐': 4, '▀': 8, '∅': 7, '∈': 5, '≡': 6, '±': 5, '≥': 5, '≤': 5, '⌠': 4, '⌡': 4, '÷': 5, '≈': 6, '°': 4, '∙': 2, '√': 6, 'ⁿ': 4, '²': 4, '■': 5}

def measure_text_width(string):
    width = 0
    for char in string:
        width += char_width[char] + 1
    return width

def text_padding(width):
    spaces = width // 6
    zws = width - (spaces * 6)
    chars = [" \u200c"] * spaces + ["\u200c"] * zws
    return {"text":"".join(chars), "bold":True}