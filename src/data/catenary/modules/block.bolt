from catenary:item import CatenaryItem, data_generator
from ps_beet_bolt.bolt_item import transformer
from nbtlib import IntArray

OPPOSITE = {
  "west": "east",
  "east": "west",
  "north": "south",
  "south": "north"
}

class BarrelBlockItem(CatenaryItem):
  abstract = True
  base_item = "barrel"

  @transformer(component = "custom_data")
  def set_placed_trigger_data(item, custom_data):
    if custom_data is None:
      custom_data = {}
    return custom_data | {"catenary":{"placed_trigger":{"id": item.id}}}

  @data_generator
  def place_advancement(item):
    path = f"{item.namespace}:block/{item.id}/placed"
    nbt = "{components:{'minecraft:custom_data':{catenary:{placed_trigger:{id:'" + item.id + "'}}}}}"
    advancement path {
      "criteria": {
        "requirement": {
          "trigger": "minecraft:placed_block",
          "conditions": {
            "location": [
              {
                "condition": "minecraft:location_check",
                "predicate": {
                  "block": {
                    "blocks": "minecraft:barrel",
                    "nbt": nbt
                  }
                }
              }
            ]
          }
        }
      },
      "rewards": {
        "function": f"{path}_advancement"
      }
    }

    function f"{path}_advancement":
      advancement revoke @s only path
      data modify storage catenary:calc internal.placement.predicate set value {nbt:nbt, function:f"{path}_internal"}
      execute anchored eyes positioned ^ ^ ^2.5 align xyz positioned ~0.5 ~0.5 ~0.5 run function catenary:custom_block/barrel/scan_cube
    
    function f"{path}_internal":
      data remove block ~ ~ ~ components."minecraft:custom_data".catenary.placed_trigger
      data modify block ~ ~ ~ components."minecraft:custom_data".catenary.custom_block set value {id:item.id}
      execute store success score #barrel.placed_success catenary.calc run function path
      execute if score #barrel.placed_success catenary.calc matches 0 run setblock ~ ~ ~ air
      execute if score #barrel.placed_success catenary.calc matches 0 run loot spawn ~ ~ ~ loot item.loot_table

    function path:
      item.on_placed(item)
  
  @data_generator
  def generate_on_broken_func(item):
    if hasattr(item, "on_broken"):
      append function catenary:custom_block/barrel/broken_delegate:
        if entity @s[tag=f"catenary.custom_block.id.{item.id}"] run function f"{item.namespace}:block/{item.id}/broken"
      
      function f"{item.namespace}:block/{item.id}/broken":
        item.on_broken(item)
    
  
  @data_generator
  def used_advancement(item):
    if not hasattr(item, "on_use"):
      return

    path = f"{item.namespace}:block/{item.id}/used"
    nbt = "{components:{'minecraft:custom_data':{catenary:{custom_block:{id:'" + item.id + "'}}}}}"
    advancement path {
      "criteria": {
        "requirement": {
          "trigger": "minecraft:default_block_use",
          "conditions": {
            "location": [
              {
                "condition": "minecraft:location_check",
                "predicate": {
                  "block": {
                    "blocks": "minecraft:barrel",
                    "nbt": nbt
                  }
                }
              }
            ]
          }
        }
      },
      "rewards": {
        "function": f"{path}_advancement"
      }
    }

    function f"{path}_advancement":
      advancement revoke @s only path
      execute anchored eyes positioned ^ ^ ^ run function f"{path}_raycast"

    function f"{path}_raycast":
      for i in range(50):
        j = i / 10 + 0.5
        execute positioned ^ ^ ^j if block ~ ~ ~ barrel{components:{"minecraft:custom_data":{catenary:{custom_block:{id:item.id}}}}} run return run execute align xyz positioned ~0.5 ~0.5 ~0.5 run function f"{path}_raycast_hit"
    
    function f"{path}_raycast_hit":
      stopsound @s * minecraft:block.barrel.open
      item.on_use(item)



class BarrelStonePressurePlateBlockItem(BarrelBlockItem):
  abstract = True
    
  @data_generator
  def generate_on_broken_func(item):
    if hasattr(item, "on_broken"):
      append function catenary:custom_block/stone_pressure_plate/broken_delegate:
        if entity @s[tag=f"catenary.custom_block.id.{item.id}"] run function f"{item.namespace}:block/{item.id}/broken"
      
      function f"{item.namespace}:block/{item.id}/broken":
        item.on_broken(item)
    
  @data_generator
  def generate_block_state_change_funcs(item):
    if hasattr(item, "on_pressed_down"):
      append function catenary:custom_block/stone_pressure_plate/pressed_down_delegate:
        if entity @s[tag=f"catenary.custom_block.id.{item.id}"] run function f"{item.namespace}:block/{item.id}/pressed_down"
      
      function f"{item.namespace}:block/{item.id}/pressed_down":
        item.on_pressed_down(item)